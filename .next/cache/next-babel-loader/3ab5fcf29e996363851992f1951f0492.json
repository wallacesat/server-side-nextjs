{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime-corejs2/helpers/toConsumableArray\");\n\nvar _Map = require(\"@babel/runtime-corejs2/core-js/map\");\n\nvar _classCallCheck = require(\"@babel/runtime-corejs2/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime-corejs2/helpers/createClass\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar UrlNode =\n/*#__PURE__*/\nfunction () {\n  function UrlNode() {\n    _classCallCheck(this, UrlNode);\n\n    this.placeholder = true;\n    this.children = new _Map();\n    this.slugName = null;\n  }\n\n  _createClass(UrlNode, [{\n    key: \"hasSlug\",\n    value: function hasSlug() {\n      return this.slugName != null;\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(urlPath) {\n      this._insert(urlPath.split('/').filter(Boolean));\n    }\n  }, {\n    key: \"smoosh\",\n    value: function smoosh() {\n      return this._smoosh();\n    }\n  }, {\n    key: \"_smoosh\",\n    value: function _smoosh() {\n      var _this = this;\n\n      var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';\n\n      var childrenPaths = _toConsumableArray(this.children.keys()).sort();\n\n      if (this.hasSlug()) {\n        childrenPaths.splice(childrenPaths.indexOf('[]'), 1);\n      }\n\n      var routes = childrenPaths.map(function (c) {\n        return _this.children.get(c)._smoosh(\"\".concat(prefix).concat(c, \"/\"));\n      }).reduce(function (prev, curr) {\n        return [].concat(_toConsumableArray(prev), _toConsumableArray(curr));\n      }, []);\n\n      if (this.hasSlug()) {\n        routes.push.apply(routes, _toConsumableArray(this.children.get('[]')._smoosh(\"\".concat(prefix, \"[\").concat(this.slugName, \"]/\"))));\n      }\n\n      if (!this.placeholder) {\n        routes.unshift(prefix === '/' ? '/' : prefix.slice(0, -1));\n      }\n\n      return routes;\n    }\n  }, {\n    key: \"_insert\",\n    value: function _insert(urlPaths) {\n      var slugNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n      if (urlPaths.length === 0) {\n        this.placeholder = false;\n        return;\n      } // The next segment in the urlPaths list\n\n\n      var nextSegment = urlPaths[0]; // Check if the segment matches `[something]`\n\n      if (nextSegment.startsWith('[') && nextSegment.endsWith(']')) {\n        // Strip `[` and `]`, leaving only `something`\n        var slugName = nextSegment.slice(1, -1); // If the specific segment already has a slug but the slug is not `something`\n        // This prevents collisions like:\n        // pages/[post]/index.js\n        // pages/[id]/index.js\n        // Because currently multiple dynamic params on the same segment level are not supported\n\n        if (this.hasSlug() && slugName !== this.slugName) {\n          // TODO: This error seems to be confusing for users, needs an err.sh link, the description can be based on above comment.\n          throw new Error('You cannot use different slug names for the same dynamic path.');\n        }\n\n        if (slugNames.indexOf(slugName) !== -1) {\n          throw new Error(\"You cannot have the same slug name \\\"\".concat(slugName, \"\\\" repeat within a single dynamic path\"));\n        }\n\n        slugNames.push(slugName); // slugName is kept as it can only be one particular slugName\n\n        this.slugName = slugName; // nextSegment is overwritten to [] so that it can later be sorted specifically\n\n        nextSegment = '[]';\n      } // If this UrlNode doesn't have the nextSegment yet we create a new child UrlNode\n\n\n      if (!this.children.has(nextSegment)) {\n        this.children.set(nextSegment, new UrlNode());\n      }\n\n      this.children.get(nextSegment)._insert(urlPaths.slice(1), slugNames);\n    }\n  }]);\n\n  return UrlNode;\n}();\n\nfunction getSortedRoutes(normalizedPages) {\n  // First the UrlNode is created, and every UrlNode can have only 1 dynamic segment\n  // Eg you can't have pages/[post]/abc.js and pages/[hello]/something-else.js\n  // Only 1 dynamic segment per nesting level\n  // So in the case that is test/integration/dynamic-routing it'll be this:\n  // pages/[post]/comments.js\n  // pages/blog/[post]/comment/[id].js\n  // Both are fine because `pages/[post]` and `pages/blog` are on the same level\n  // So in this case `UrlNode` created here has `this.slugName === 'post'`\n  // And since your PR passed through `slugName` as an array basically it'd including it in too many possibilities\n  // Instead what has to be passed through is the upwards path's dynamic names\n  var root = new UrlNode(); // Here the `root` gets injected multiple paths, and insert will break them up into sublevels\n\n  normalizedPages.forEach(function (pagePath) {\n    return root.insert(pagePath);\n  }); // Smoosh will then sort those sublevels up to the point where you get the correct route definition priority\n\n  return root.smoosh();\n}\n\nexports.getSortedRoutes = getSortedRoutes;","map":{"version":3,"sources":["/Users/wallace/Documents/skylab/typescript/nextjs/node_modules/next/dist/next-server/lib/router/utils/sorted-routes.js"],"names":["exports","value","UrlNode","placeholder","children","slugName","urlPath","_insert","split","filter","Boolean","_smoosh","prefix","childrenPaths","keys","sort","hasSlug","splice","indexOf","routes","map","c","get","reduce","prev","curr","push","unshift","slice","urlPaths","slugNames","length","nextSegment","startsWith","endsWith","Error","has","set","getSortedRoutes","normalizedPages","root","forEach","pagePath","insert","smoosh"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass UrlNode {\n    constructor() {\n        this.placeholder = true;\n        this.children = new Map();\n        this.slugName = null;\n    }\n    hasSlug() {\n        return this.slugName != null;\n    }\n    insert(urlPath) {\n        this._insert(urlPath.split('/').filter(Boolean));\n    }\n    smoosh() {\n        return this._smoosh();\n    }\n    _smoosh(prefix = '/') {\n        const childrenPaths = [...this.children.keys()].sort();\n        if (this.hasSlug()) {\n            childrenPaths.splice(childrenPaths.indexOf('[]'), 1);\n        }\n        const routes = childrenPaths\n            .map(c => this.children.get(c)._smoosh(`${prefix}${c}/`))\n            .reduce((prev, curr) => [...prev, ...curr], []);\n        if (this.hasSlug()) {\n            routes.push(...this.children.get('[]')._smoosh(`${prefix}[${this.slugName}]/`));\n        }\n        if (!this.placeholder) {\n            routes.unshift(prefix === '/' ? '/' : prefix.slice(0, -1));\n        }\n        return routes;\n    }\n    _insert(urlPaths, slugNames = []) {\n        if (urlPaths.length === 0) {\n            this.placeholder = false;\n            return;\n        }\n        // The next segment in the urlPaths list\n        let nextSegment = urlPaths[0];\n        // Check if the segment matches `[something]`\n        if (nextSegment.startsWith('[') && nextSegment.endsWith(']')) {\n            // Strip `[` and `]`, leaving only `something`\n            const slugName = nextSegment.slice(1, -1);\n            // If the specific segment already has a slug but the slug is not `something`\n            // This prevents collisions like:\n            // pages/[post]/index.js\n            // pages/[id]/index.js\n            // Because currently multiple dynamic params on the same segment level are not supported\n            if (this.hasSlug() && slugName !== this.slugName) {\n                // TODO: This error seems to be confusing for users, needs an err.sh link, the description can be based on above comment.\n                throw new Error('You cannot use different slug names for the same dynamic path.');\n            }\n            if (slugNames.indexOf(slugName) !== -1) {\n                throw new Error(`You cannot have the same slug name \"${slugName}\" repeat within a single dynamic path`);\n            }\n            slugNames.push(slugName);\n            // slugName is kept as it can only be one particular slugName\n            this.slugName = slugName;\n            // nextSegment is overwritten to [] so that it can later be sorted specifically\n            nextSegment = '[]';\n        }\n        // If this UrlNode doesn't have the nextSegment yet we create a new child UrlNode\n        if (!this.children.has(nextSegment)) {\n            this.children.set(nextSegment, new UrlNode());\n        }\n        this.children.get(nextSegment)._insert(urlPaths.slice(1), slugNames);\n    }\n}\nfunction getSortedRoutes(normalizedPages) {\n    // First the UrlNode is created, and every UrlNode can have only 1 dynamic segment\n    // Eg you can't have pages/[post]/abc.js and pages/[hello]/something-else.js\n    // Only 1 dynamic segment per nesting level\n    // So in the case that is test/integration/dynamic-routing it'll be this:\n    // pages/[post]/comments.js\n    // pages/blog/[post]/comment/[id].js\n    // Both are fine because `pages/[post]` and `pages/blog` are on the same level\n    // So in this case `UrlNode` created here has `this.slugName === 'post'`\n    // And since your PR passed through `slugName` as an array basically it'd including it in too many possibilities\n    // Instead what has to be passed through is the upwards path's dynamic names\n    const root = new UrlNode();\n    // Here the `root` gets injected multiple paths, and insert will break them up into sublevels\n    normalizedPages.forEach(pagePath => root.insert(pagePath));\n    // Smoosh will then sort those sublevels up to the point where you get the correct route definition priority\n    return root.smoosh();\n}\nexports.getSortedRoutes = getSortedRoutes;\n"]},"metadata":{},"sourceType":"script"}